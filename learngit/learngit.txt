Git教程

1.Git简介

	Git是目前世界上最先进的分布式版本控制系统
	
	Linux系统的源码就是由Git管理的
	
	2008年，GitHub网站上线，为开源项目免费提供Git存储
	
	集中式vs分布式：
	
		集中式版本控制系统：
		
			版本库集中存放在中央服务器。所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。
			（当你在修改一个文件的时候，别人不能修改？）
			
			必须联网才能工作。（取完版本库之后，和上传之前，在本地修改的这个过程是不是不需要联网？）
			
		分布式版本控制系统：
		
			没有中央服务器。每个人的电脑上都是一个完整的版本库。
			
			如何协作：只需将各自的修改推送给对方即可。
			（感觉很难管理，如何确定哪个才是最终的版本？）
			在实践中摸索这个问题的答案。
			
			不需要联网。
			
2.安装Git

	我是在cygwin64上安装git的。安装文件在文件夹内。（不能放excel文件）
	
	Windows下要使用很多Linux/Unix的工具时，需要Cygwin这样的模拟环境，Git也一样。
	
	安装完成后配置：
	
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
		
	注意gitconfig命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
	
3.创建版本库

	版本库又名仓库，英文名repository
	可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
	
	创建一个版本库：
	
		首先，选择一个合适的地方，创建一个空目录
			$ mkdir learngit
			$ cd learngit
			$ pwd
			/Users/michael/learngit
		第二步，通过git init命令把这个目录变成Git可以管理的仓库：
			$ git init
			Initialized empty Git repository in /Users/michael/learngit/.git/
		此时，当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的
		
	将文件添加到版本库：
	    
		版本控制系统管理只能跟踪文本文件的改动。
		图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化
		（Microsoft的Word格式是二进制格式）
		
		首先：编写一个文件readme.txt，放到learngit目录下。
		
		第一步，用命令git add告诉Git，把文件添加到仓库：
			$ git add readme.txt
		第二步，用命令git commit告诉Git，把文件提交到仓库：
			$ git commit -m "wrote a readme file"
			
4.时光机穿梭

	要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
	
	版本回退：
		HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id
		
		穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本
		
		要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
		
	工作区和暂存区：
		工作区：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。
		
		版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
		
			包括：称为stage（或者叫index）的暂存区，Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
		
		前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：
			第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；

			第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
			
	管理修改：
	
		每次修改，如果不add到暂存区，那就不会加入到commit中
		
	
	撤销修改：
		场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。(file是文件的名字)
	
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。(file是文件的名字)

		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
		
	删除文件：
	
		命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。
		
5.远程仓库

	Git的杀手级功能之一
	Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。
	
	GitHub：这个网站就是提供Git仓库托管服务的。
	
	由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
	
	第1步：创建SSH Key。
		$ ssh-keygen -t rsa -C "youremail@example.com"
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
	
	添加远程仓库：
	
		现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。
		
		首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
		
		在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
		
		目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。

		现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：
		
		$ git remote add origin git@github.com:michaelliao/learngit.git
		
		请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。

		添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
		
		下一步，就可以把本地库的所有内容推送到远程库上：
		
		$ git push -u origin master
		
		把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。

		由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

		推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：
		
		从现在起，只要本地作了提交，就可以通过命令：
		
		$ git push origin master
		
		当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：

		The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
		RSA key fingerprint is xx.xx.xx.xx.xx.
		Are you sure you want to continue connecting (yes/no)?
		这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

		Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：

		Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
		这个警告只会出现一次，后面的操作就不会有任何警告了。

		如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。
	
		
	
	